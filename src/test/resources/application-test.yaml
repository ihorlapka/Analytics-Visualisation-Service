server:
  base-path: /avs
  port: 8083
spring:
  application:
    name: analytics-visualisation-service
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100
    mongodb:
      uuid-representation: standard
      uri: test-mongodb-uri
      connect-timeout: 10s
      socket-timeout: 30s
  r2dbc:
    url: test-r2dbc-url
    username: username
    password: pass
    pool:
      initial-size: 5
      max-size: 20
      max-idle-time: 30s
      max-create-connection-time: 10s
  redis:
    host: localhost
    port: 6379
    password: qwerty
management:
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    data.repository.autotime.enabled: true
  health:
    diskspace:
      path: /
      threshold: 1GB
kafka:
  consumer:
    topic: iot-devices-data
    poll-limit-rate: 500
    backoff-time-seconds: 2
    max-backoff-time-seconds: 60
    properties:
      bootstrap.servers: localhost:9092
      group.id: alerts
      key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      schema.registry.url: mock://my-scope:8081
      specific.avro.reader: true
      auto.offset.reset: earliest
      enable.auto.commit: false
      max.poll.records: 10000
      max.poll.interval: 300000
      fetch.min.bytes: 128
      fetch.max.wait.ms: 5000
      value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
  producer:
    topic: iot-devices-data
    properties:
      bootstrap.servers: localhost:9092
      key.serializer: org.apache.kafka.common.serialization.StringSerializer
      value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      schema.registry.url: mock://my-scope:8081
cache:
  expiration.time.min: 5